// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: litekube_vpn_service.proto

package pb_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiteKubeVpnServiceClient is the client API for LiteKubeVpnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteKubeVpnServiceClient interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
	CheckConnState(ctx context.Context, in *CheckConnStateRequest, opts ...grpc.CallOption) (*CheckConnResponse, error)
	UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error)
}

type liteKubeVpnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteKubeVpnServiceClient(cc grpc.ClientConnInterface) LiteKubeVpnServiceClient {
	return &liteKubeVpnServiceClient{cc}
}

func (c *liteKubeVpnServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeVpnService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeVpnServiceClient) CheckConnState(ctx context.Context, in *CheckConnStateRequest, opts ...grpc.CallOption) (*CheckConnResponse, error) {
	out := new(CheckConnResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeVpnService/CheckConnState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeVpnServiceClient) UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error) {
	out := new(UnRegisterResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeVpnService/UnRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteKubeVpnServiceServer is the server API for LiteKubeVpnService service.
// All implementations must embed UnimplementedLiteKubeVpnServiceServer
// for forward compatibility
type LiteKubeVpnServiceServer interface {
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	CheckConnState(context.Context, *CheckConnStateRequest) (*CheckConnResponse, error)
	UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error)
	mustEmbedUnimplementedLiteKubeVpnServiceServer()
}

// UnimplementedLiteKubeVpnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiteKubeVpnServiceServer struct {
}

func (UnimplementedLiteKubeVpnServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedLiteKubeVpnServiceServer) CheckConnState(context.Context, *CheckConnStateRequest) (*CheckConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnState not implemented")
}
func (UnimplementedLiteKubeVpnServiceServer) UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegister not implemented")
}
func (UnimplementedLiteKubeVpnServiceServer) mustEmbedUnimplementedLiteKubeVpnServiceServer() {}

// UnsafeLiteKubeVpnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteKubeVpnServiceServer will
// result in compilation errors.
type UnsafeLiteKubeVpnServiceServer interface {
	mustEmbedUnimplementedLiteKubeVpnServiceServer()
}

func RegisterLiteKubeVpnServiceServer(s grpc.ServiceRegistrar, srv LiteKubeVpnServiceServer) {
	s.RegisterService(&LiteKubeVpnService_ServiceDesc, srv)
}

func _LiteKubeVpnService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeVpnServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeVpnService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeVpnServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeVpnService_CheckConnState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeVpnServiceServer).CheckConnState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeVpnService/CheckConnState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeVpnServiceServer).CheckConnState(ctx, req.(*CheckConnStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeVpnService_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeVpnServiceServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeVpnService/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeVpnServiceServer).UnRegister(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiteKubeVpnService_ServiceDesc is the grpc.ServiceDesc for LiteKubeVpnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiteKubeVpnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LiteKubeVpnService",
	HandlerType: (*LiteKubeVpnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _LiteKubeVpnService_HelloWorld_Handler,
		},
		{
			MethodName: "CheckConnState",
			Handler:    _LiteKubeVpnService_CheckConnState_Handler,
		},
		{
			MethodName: "UnRegister",
			Handler:    _LiteKubeVpnService_UnRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "litekube_vpn_service.proto",
}
