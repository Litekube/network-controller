// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: network_controller_service.proto

package pb_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiteKubeNCServiceClient is the client API for LiteKubeNCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteKubeNCServiceClient interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetBootStrapToken(ctx context.Context, in *GetBootStrapTokenRequest, opts ...grpc.CallOption) (*GetBootStrapTokenResponse, error)
	CheckConnState(ctx context.Context, in *CheckConnStateRequest, opts ...grpc.CallOption) (*CheckConnResponse, error)
	UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error)
	GetRegistedIp(ctx context.Context, in *GetRegistedIpRequest, opts ...grpc.CallOption) (*GetRegistedIpResponse, error)
}

type liteKubeNCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteKubeNCServiceClient(cc grpc.ClientConnInterface) LiteKubeNCServiceClient {
	return &liteKubeNCServiceClient{cc}
}

func (c *liteKubeNCServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCServiceClient) GetBootStrapToken(ctx context.Context, in *GetBootStrapTokenRequest, opts ...grpc.CallOption) (*GetBootStrapTokenResponse, error) {
	out := new(GetBootStrapTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/GetBootStrapToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCServiceClient) CheckConnState(ctx context.Context, in *CheckConnStateRequest, opts ...grpc.CallOption) (*CheckConnResponse, error) {
	out := new(CheckConnResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/CheckConnState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCServiceClient) UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterResponse, error) {
	out := new(UnRegisterResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/UnRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCServiceClient) GetRegistedIp(ctx context.Context, in *GetRegistedIpRequest, opts ...grpc.CallOption) (*GetRegistedIpResponse, error) {
	out := new(GetRegistedIpResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCService/GetRegistedIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteKubeNCServiceServer is the server API for LiteKubeNCService service.
// All implementations must embed UnimplementedLiteKubeNCServiceServer
// for forward compatibility
type LiteKubeNCServiceServer interface {
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetBootStrapToken(context.Context, *GetBootStrapTokenRequest) (*GetBootStrapTokenResponse, error)
	CheckConnState(context.Context, *CheckConnStateRequest) (*CheckConnResponse, error)
	UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error)
	GetRegistedIp(context.Context, *GetRegistedIpRequest) (*GetRegistedIpResponse, error)
	mustEmbedUnimplementedLiteKubeNCServiceServer()
}

// UnimplementedLiteKubeNCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiteKubeNCServiceServer struct {
}

func (UnimplementedLiteKubeNCServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) GetBootStrapToken(context.Context, *GetBootStrapTokenRequest) (*GetBootStrapTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootStrapToken not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) CheckConnState(context.Context, *CheckConnStateRequest) (*CheckConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnState not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegister not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) GetRegistedIp(context.Context, *GetRegistedIpRequest) (*GetRegistedIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistedIp not implemented")
}
func (UnimplementedLiteKubeNCServiceServer) mustEmbedUnimplementedLiteKubeNCServiceServer() {}

// UnsafeLiteKubeNCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteKubeNCServiceServer will
// result in compilation errors.
type UnsafeLiteKubeNCServiceServer interface {
	mustEmbedUnimplementedLiteKubeNCServiceServer()
}

func RegisterLiteKubeNCServiceServer(s grpc.ServiceRegistrar, srv LiteKubeNCServiceServer) {
	s.RegisterService(&LiteKubeNCService_ServiceDesc, srv)
}

func _LiteKubeNCService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCService_GetBootStrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootStrapTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).GetBootStrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/GetBootStrapToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).GetBootStrapToken(ctx, req.(*GetBootStrapTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCService_CheckConnState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).CheckConnState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/CheckConnState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).CheckConnState(ctx, req.(*CheckConnStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCService_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).UnRegister(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCService_GetRegistedIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistedIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCServiceServer).GetRegistedIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCService/GetRegistedIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCServiceServer).GetRegistedIp(ctx, req.(*GetRegistedIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiteKubeNCService_ServiceDesc is the grpc.ServiceDesc for LiteKubeNCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiteKubeNCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LiteKubeNCService",
	HandlerType: (*LiteKubeNCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _LiteKubeNCService_HelloWorld_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LiteKubeNCService_HealthCheck_Handler,
		},
		{
			MethodName: "GetBootStrapToken",
			Handler:    _LiteKubeNCService_GetBootStrapToken_Handler,
		},
		{
			MethodName: "CheckConnState",
			Handler:    _LiteKubeNCService_CheckConnState_Handler,
		},
		{
			MethodName: "UnRegister",
			Handler:    _LiteKubeNCService_UnRegister_Handler,
		},
		{
			MethodName: "GetRegistedIp",
			Handler:    _LiteKubeNCService_GetRegistedIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_controller_service.proto",
}

// LiteKubeNCBootstrapServiceClient is the client API for LiteKubeNCBootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteKubeNCBootstrapServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
}

type liteKubeNCBootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteKubeNCBootstrapServiceClient(cc grpc.ClientConnInterface) LiteKubeNCBootstrapServiceClient {
	return &liteKubeNCBootstrapServiceClient{cc}
}

func (c *liteKubeNCBootstrapServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCBootstrapService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteKubeNCBootstrapServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.LiteKubeNCBootstrapService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteKubeNCBootstrapServiceServer is the server API for LiteKubeNCBootstrapService service.
// All implementations must embed UnimplementedLiteKubeNCBootstrapServiceServer
// for forward compatibility
type LiteKubeNCBootstrapServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	mustEmbedUnimplementedLiteKubeNCBootstrapServiceServer()
}

// UnimplementedLiteKubeNCBootstrapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiteKubeNCBootstrapServiceServer struct {
}

func (UnimplementedLiteKubeNCBootstrapServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLiteKubeNCBootstrapServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLiteKubeNCBootstrapServiceServer) mustEmbedUnimplementedLiteKubeNCBootstrapServiceServer() {
}

// UnsafeLiteKubeNCBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteKubeNCBootstrapServiceServer will
// result in compilation errors.
type UnsafeLiteKubeNCBootstrapServiceServer interface {
	mustEmbedUnimplementedLiteKubeNCBootstrapServiceServer()
}

func RegisterLiteKubeNCBootstrapServiceServer(s grpc.ServiceRegistrar, srv LiteKubeNCBootstrapServiceServer) {
	s.RegisterService(&LiteKubeNCBootstrapService_ServiceDesc, srv)
}

func _LiteKubeNCBootstrapService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCBootstrapServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCBootstrapService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCBootstrapServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteKubeNCBootstrapService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteKubeNCBootstrapServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LiteKubeNCBootstrapService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteKubeNCBootstrapServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiteKubeNCBootstrapService_ServiceDesc is the grpc.ServiceDesc for LiteKubeNCBootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiteKubeNCBootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LiteKubeNCBootstrapService",
	HandlerType: (*LiteKubeNCBootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LiteKubeNCBootstrapService_HealthCheck_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _LiteKubeNCBootstrapService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_controller_service.proto",
}
